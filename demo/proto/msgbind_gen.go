// Auto generated by github.com/davyxu/cellmesh/protogen
// DO NOT EDIT!

package proto

import (
	"github.com/davyxu/cellnet"
)

// Make compiler import happy
var (
	_ cellnet.Event
)

// agent
var (
	Handle_Agent_BindBackendACK = func(ev cellnet.Event) { panic("'BindBackendACK' not handled") }
	Handle_Agent_CloseClientACK = func(ev cellnet.Event) { panic("'CloseClientACK' not handled") }
	Handle_Agent_Default        func(ev cellnet.Event)
)

// agent_frontend
var (
	Handle_Agent_frontend_PingACK = func(ev cellnet.Event) { panic("'PingACK' not handled") }
	Handle_Agent_frontend_Default func(ev cellnet.Event)
)

// game
var (
	Handle_Game_ChatREQ   = func(ev cellnet.Event) { panic("'ChatREQ' not handled") }
	Handle_Game_VerifyREQ = func(ev cellnet.Event) { panic("'VerifyREQ' not handled") }
	Handle_Game_Default   func(ev cellnet.Event)
)

// login
var (
	Handle_Login_LoginREQ = func(ev cellnet.Event) { panic("'LoginREQ' not handled") }
	Handle_Login_Default  func(ev cellnet.Event)
)

func GetMessageHandler(svcName string) cellnet.EventCallback {

	switch svcName {
	case "agent":
		return func(ev cellnet.Event) {
			switch ev.Message().(type) {
			case *BindBackendACK:
				Handle_Agent_BindBackendACK(ev)
			case *CloseClientACK:
				Handle_Agent_CloseClientACK(ev)
			default:
				if Handle_Agent_Default != nil {
					Handle_Agent_Default(ev)
				}
			}
		}
	case "agent_frontend":
		return func(ev cellnet.Event) {
			switch ev.Message().(type) {
			case *PingACK:
				Handle_Agent_frontend_PingACK(ev)
			default:
				if Handle_Agent_frontend_Default != nil {
					Handle_Agent_frontend_Default(ev)
				}
			}
		}
	case "game":
		return func(ev cellnet.Event) {
			switch ev.Message().(type) {
			case *ChatREQ:
				Handle_Game_ChatREQ(ev)
			case *VerifyREQ:
				Handle_Game_VerifyREQ(ev)
			default:
				if Handle_Game_Default != nil {
					Handle_Game_Default(ev)
				}
			}
		}
	case "login":
		return func(ev cellnet.Event) {
			switch ev.Message().(type) {
			case *LoginREQ:
				Handle_Login_LoginREQ(ev)
			default:
				if Handle_Login_Default != nil {
					Handle_Login_Default(ev)
				}
			}
		}
	}

	return nil
}
